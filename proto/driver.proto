syntax = "proto3";

package barks.driver;

// Driver service for managing executors and distributing tasks
service DriverService {
    // Register a new executor with the driver
    rpc RegisterExecutor(RegisterExecutorRequest) returns (RegisterExecutorResponse);

    // Send heartbeat from executor to driver
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);

    // Report task completion status
    rpc ReportTaskStatus(TaskStatusRequest) returns (TaskStatusResponse);
}

// Request to register an executor
message RegisterExecutorRequest {
    string executor_id = 1;
    string host = 2;
    uint32 port = 3;
    uint32 cores = 4;
    uint64 memory_mb = 5;
    map<string, string> attributes = 6;
    uint32 max_concurrent_tasks = 7;
    uint32 shuffle_port = 8;
}

// Response to executor registration
message RegisterExecutorResponse {
    bool success = 1;
    string message = 2;
    string driver_id = 3;
}

// Heartbeat request from executor
message HeartbeatRequest {
    string executor_id = 1;
    uint64 timestamp = 2;
    ExecutorStatus status = 3;
    repeated AccumulatorUpdate accumulator_updates = 4;
    ExecutorMetrics metrics = 5;
}

// Heartbeat response from driver
message HeartbeatResponse {
    bool success = 1;
    bool should_reregister = 2;
    string message = 3;
}

// Task status report
message TaskStatusRequest {
    string executor_id = 1;
    string task_id = 2;
    TaskState state = 3;
    bytes result = 4;  // Serialized task result
    string error_message = 5;
    TaskMetrics task_metrics = 6;
}

// Task status response
message TaskStatusResponse {
    bool success = 1;
    string message = 2;
}




// Executor status
enum ExecutorStatus {
    STARTING = 0;
    RUNNING = 1;
    IDLE = 2;
    BUSY = 3;
    STOPPING = 4;
    FAILED = 5;
}

// Task state
enum TaskState {
    TASK_PENDING = 0;
    TASK_RUNNING = 1;
    TASK_FINISHED = 2;
    TASK_FAILED = 3;
    TASK_KILLED = 4;
}

// Accumulator update
message AccumulatorUpdate {
    string name = 1;
    bytes value = 2;  // Serialized accumulator value
}

// Executor metrics
message ExecutorMetrics {
    uint64 total_tasks = 1;
    uint64 failed_tasks = 2;
    uint64 succeeded_tasks = 3;
    uint64 total_duration_ms = 4;
    uint64 total_gc_time_ms = 5;
    uint64 total_input_bytes = 6;
    uint64 total_shuffle_read_bytes = 7;
    uint64 total_shuffle_write_bytes = 8;
    uint64 max_memory_bytes = 9;
    uint64 memory_used_bytes = 10;
    uint32 active_tasks = 11;
}

// Task metrics
message TaskMetrics {
    uint64 executor_deserialize_time_ms = 1;
    uint64 executor_deserialize_cpu_time_ms = 2;
    uint64 executor_run_time_ms = 3;
    uint64 executor_cpu_time_ms = 4;
    uint64 result_size_bytes = 5;
    uint64 jvm_gc_time_ms = 6;
    uint64 result_serialization_time_ms = 7;
    uint64 memory_bytes_spilled = 8;
    uint64 disk_bytes_spilled = 9;
    uint64 peak_execution_memory_bytes = 10;
    uint64 input_bytes_read = 11;
    uint64 input_records_read = 12;
    uint64 output_bytes_written = 13;
    uint64 output_records_written = 14;
    uint64 shuffle_read_bytes = 15;
    uint64 shuffle_read_records = 16;
    uint64 shuffle_write_bytes = 17;
    uint64 shuffle_write_records = 18;
    uint64 shuffle_write_time_ms = 19;
}
